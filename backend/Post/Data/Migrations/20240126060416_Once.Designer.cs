// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Post.Data;

#nullable disable

namespace Post.Data.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240126060416_Once")]
    partial class Once
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entities.Post.Postt", b =>
                {
                    b.Property<Guid>("idPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("exp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idProject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("view")
                        .HasColumnType("int");

                    b.HasKey("idPost");

                    b.ToTable("Postts");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttComment", b =>
                {
                    b.Property<Guid>("idPostComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("idAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idPost")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("idPostComment");

                    b.HasIndex("idPost");

                    b.ToTable("PosttComments");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttCommentLike", b =>
                {
                    b.Property<Guid>("idPostCommentLike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("idAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idPostComment")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("idPostCommentLike");

                    b.HasIndex("idPostComment");

                    b.ToTable("PosttCommentLikes");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttImage", b =>
                {
                    b.Property<Guid>("idPostImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("idPost")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPostImage");

                    b.HasIndex("idPost");

                    b.ToTable("PosttImages");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttLike", b =>
                {
                    b.Property<Guid>("idPostLike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("idAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idPost")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("idPostLike");

                    b.HasIndex("idPost");

                    b.ToTable("PosttLikes");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttReply", b =>
                {
                    b.Property<Guid>("idPostReply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("idAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idPostComment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("idPostReply");

                    b.HasIndex("idPostComment");

                    b.ToTable("PosttReplies");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttReplyLike", b =>
                {
                    b.Property<Guid>("idPostReplyLike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("idAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idPostReply")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("idPostReplyLike");

                    b.HasIndex("idPostReply");

                    b.ToTable("PosttReplyLikes");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttComment", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Post.Postt", "Postt")
                        .WithMany("PosttComments")
                        .HasForeignKey("idPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postt");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttCommentLike", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Post.PosttComment", "PosttComment")
                        .WithMany("PosttCommentLikes")
                        .HasForeignKey("idPostComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PosttComment");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttImage", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Post.Postt", "Postt")
                        .WithMany("PosttImages")
                        .HasForeignKey("idPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postt");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttLike", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Post.Postt", "Postt")
                        .WithMany("PosttLikes")
                        .HasForeignKey("idPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postt");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttReply", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Post.PosttComment", "PosttComment")
                        .WithMany("PosttReplies")
                        .HasForeignKey("idPostComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PosttComment");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttReplyLike", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Post.PosttReply", "PosttReply")
                        .WithMany("PosttReplyLikes")
                        .HasForeignKey("idPostReply")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PosttReply");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.Postt", b =>
                {
                    b.Navigation("PosttComments");

                    b.Navigation("PosttImages");

                    b.Navigation("PosttLikes");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttComment", b =>
                {
                    b.Navigation("PosttCommentLikes");

                    b.Navigation("PosttReplies");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Post.PosttReply", b =>
                {
                    b.Navigation("PosttReplyLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
